import { ChatAgent } from '@ericnunes/frame_agent';
import { Tool } from '@ericnunes/frame_agent';

// Simular um LLM que responde fora do formato ReAct
class MockAdapter {
  private callCount = 0;
  
  async sendMessage(params: any) {
    this.callCount++;
    
    if (this.callCount === 1) {
      // Primeira chamada - resposta fora do formato ReAct
      console.log('[MOCK] Gerando resposta FORA do formato ReAct...');
      return {
        content: 'Esta √© uma resposta em formato livre, n√£o estou seguindo o formato ReAct esperado. Vou tentar fazer algo √∫til mas n√£o estou usando o formato estruturado.'
      };
    } else if (this.callCount === 2) {
      // Segunda chamada - ap√≥s mensagem de corre√ß√£o
      console.log('[MOCK] Gerando resposta NO formato ReAct correto...');
      return {
        content: `Thought: Recebi a corre√ß√£o, vou seguir o formato ReAct corretamente agora
Action: search
Action Input: {"query": "teste de valida√ß√£o"}`
      };
    } else {
      // Resposta final
      return {
        content: `Final Answer: Teste de valida√ß√£o de formato conclu√≠do com sucesso.`
      };
    }
  }
  
  async sendStructuredMessage(params: any) {
    return this.sendMessage(params);
  }
}

async function testReActValidationInAgentCLI() {
  console.log('=== Teste: Valida√ß√£o de Formato ReAct no Agent CLI ===\n');
  
  // Criar agente ReAct com o adaptador mock
  const agent = new ChatAgent({
    name: 'Agente de Teste',
    instructions: 'Voc√™ √© um agente para testar valida√ß√£o de formato ReAct.',
    mode: 'react'  // Importante: modo ReAct explicitamente
  });
  
  // Criar uma ferramenta de teste
  const searchTool: Tool = {
    name: 'search',
    description: 'Ferramenta de busca para testes',
    parameters: {
      type: 'object',
      properties: {
        query: {
          type: 'string',
          description: 'Termo de busca'
        }
      },
      required: ['query']
    },
    execute: async (args: any) => {
      console.log(`[EXECUTANDO] Busca para: ${args.query}`);
      return `Resultados para: ${args.query}`;
    }
  };
  
  agent.registerTool(searchTool);
  
  // Substituir o provedor por um mock
  let mockCallCount = 0;
  (agent as any).providerAdapter = {
    sendMessage: async (params: any) => {
      const currentCallCount = mockCallCount;
      mockCallCount++;
      
      if (currentCallCount === 0) {
        // Primeira chamada - resposta fora do formato ReAct
        console.log('[MOCK] Gerando resposta FORA do formato ReAct...');
        return {
          content: 'Esta √© uma resposta em formato livre, n√£o estou seguindo o formato ReAct esperado. Vou tentar fazer algo √∫til mas n√£o estou usando o formato estruturado.'
        };
      } else if (currentCallCount === 1) {
        // Segunda chamada - ap√≥s mensagem de corre√ß√£o
        console.log('[MOCK] Gerando resposta NO formato ReAct correto...');
        return {
          content: `Thought: Recebi a corre√ß√£o, vou seguir o formato ReAct corretamente agora
Action: search
Action Input: {"query": "teste de valida√ß√£o"}`
        };
      } else {
        // Resposta final
        return {
          content: `Final Answer: Teste de valida√ß√£o de formato conclu√≠do com sucesso.`
        };
      }
    },
    sendStructuredMessage: async (params: any) => {
      return (agent as any).providerAdapter.sendMessage(params);
    }
  };
  
  try {
    console.log('Iniciando teste com resposta fora do formato...\n');
    
    // Enviar uma mensagem para o modo ReAct
    const response = await agent.sendMessage('Fa√ßa uma busca por "teste de valida√ß√£o"');
    
    console.log('\n‚úÖ RESULTADO ESPERADO:');
    console.log('- O sistema detectou a resposta fora do formato ReAct');
    console.log('- Foi aplicado o mecanismo de reintegra√ß√£o');
    console.log('- A execu√ß√£o continuou normalmente');
    
    console.log('\nResposta recebida:');
    console.log(response);
    
    console.log('\nüéâ A integra√ß√£o entre agent_cli e frame_agent est√° funcionando corretamente!');
    console.log('A valida√ß√£o de formato ReAct est√° ativa e operacional.');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar o teste
testReActValidationInAgentCLI().catch(console.error);